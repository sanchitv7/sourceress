# sourceress/src/sourceress/agents/excel_writer.py

"""Excel Writer Agent.

Emits all artefacts into a single Excel workbook.
"""

from __future__ import annotations

from pathlib import Path
from typing import Any

from openpyxl import Workbook
from openpyxl.styles import PatternFill
# from openpyxl.utils import get_column_letter

from sourceress.agents.base import BaseAgent
from sourceress.models import PitchResult

GREEN_GRADIENT_FILL = PatternFill(start_color="C6EFCE", end_color="006100", fill_type="solid")


class ExcelWriter(BaseAgent):
    """Agent responsible for writing outputs to an Excel (.xlsx) file."""

    name: str = "excel_writer"

    def __init__(self) -> None:
        super().__init__(
            role="Report Generation Specialist",
            goal="Create comprehensive Excel reports with all candidate information and formatting",
            backstory="You are a skilled business analyst who specializes in creating professional, "
                     "well-formatted Excel reports. You have an eye for detail and ensure that "
                     "all data is presented clearly and professionally for hiring managers to review.",
        )

    async def run(
        self,
        pitched: PitchResult,
        output_path: Path | str = "output.xlsx",
        **kwargs: Any,
    ) -> Path:  # noqa: D401
        """Execute the agent.

        Args:
            pitched: Final artefacts from PitchGenerator.
            output_path: Destination file path.
            **kwargs: Additional runtime parameters.

        Returns:
            Path to the written Excel file.
        """
        wb = Workbook()
        ws = wb.active
        if ws is not None:
            ws.title = "candidates"
        self.log.debug("Writing %d candidate rows to Excel", len(pitched.pitches))

        # Header
        headers = [
            "Candidate Name",
            "LinkedIn URL",
            "Match Score",
            "Key Matches",
            "Pitch Script",
            "LinkedIn DM",
            "WhatsApp Msg",
            "Notes",
        ]
        if ws is not None:
            ws.append(headers)
            ws.freeze_panes = "A2"

        # TODO(student): Populate worksheet with candidate data.
        #   – Loop over `pitched.pitches` and write rows: name, url, score, key matches, messages.
        #   – Use `openpyxl.worksheet.table.Table` or `xlsxwriter` for better performance & styling.
        #   – Apply conditional formatting for high scores (e.g., >80) using `ColorScaleRule` instead of static fill.
        #   – Auto-fit column widths after writing to improve readability.

        # Write dummy data for each pitch
        for pitch in pitched.pitches:
            if ws is not None:
                ws.append([
                    "Sample Candidate",  # Will be populated from candidate data
                    pitch.linkedin_url,
                    "75",  # Placeholder score
                    "Python, Machine Learning match",  # Placeholder key matches
                    pitch.cold_call,
                    pitch.dm_message,
                    pitch.whatsapp_message,
                    "Generated by Sourceress"
                ])

        match_score_col = headers.index("Match Score") + 1
        if ws is not None:
            for row_idx in range(2, ws.max_row + 1):
                cell = ws.cell(row=row_idx, column=match_score_col)
                cell.fill = GREEN_GRADIENT_FILL

        wb.save(output_path)
        self.log.debug("Excel workbook saved to %s", output_path)
        return Path(output_path) 